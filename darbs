#!/bin/sh

# Dotfile Auto Rice Bootstrapping Script (DARBS)
# by Alexander Brown<alex.brown7711gmail.com>
# Fork of Luke Smith <luke@lukesmith.xyz>
# License: GNU GPLv3

###############################################################################
			 ### SOURCE CONFIGURATION FILE ###
###############################################################################

. ./config

###############################################################################
			    ### GLOBAL VARIABLES ###
###############################################################################
create_account=""
group=""
name=""

###############################################################################
			       ### FUNCTIONS ###
###############################################################################

##============================================================================
# Return the name of the operating system
getos() {
	echo $(hostnamectl | grep "Operating System" | cut -d: -f2) # Get the name of the operating system
}

##============================================================================
# Install a package
installpkg() {
	pkg_mngr="" # Selected package manager based on the flavor of Linux
	
	case "$(getos)" in
		*Debian*) pkg_mngr="apt install -y" ;;
		*Arch*) pkg_mngr="pacman --noconfirm --needed -S" ;;
		*) error "Unable to identify flavor of  Linux!\\n OS IDENTIFIED: $(getos)\\n !!! Aborting !!!" ;;
	esac

	# Install the package
	${pkg_mngr} "$1" > /dev/null 2>&1
}

##============================================================================
# Throw an error
error() {
	# Log to stderr and exit with failure.
	printf "%s\n" "$1" >&2
	exit 1
}

##============================================================================
#
welcomemsg() {
	whiptail --title "Welcome!" \
		--msgbox "Welcome to Dotfile Auto-Rice Bootstrapping Script!\\n\\nThis script will automatically install a fully-featured Linux desktop." 10 60

	case $(getos) in
		*Arch*)
			whiptail --title "Important Note!" --yes-button "All ready!" \
				--no-button "Return..." \
				--yesno "Be sure the computer you are using has current pacman updates and refreshed Arch keyrings.\\n\\nIf it does not, the installation of some programs might fail." 8 70
			;;
		*);; # Continue
	esac
}

##============================================================================
#
getuserandpass() {
	# Ask if a user accoount is to be created
	whiptail --title "Create user account?" --yes-button "Yes" \
		--no-button "No" \
		--yesno "If you don't want to create a user account, then you will be prompted for what user you want to rice." 13 60 || {
		clear && create_account="y"
		clear && create_account="n"
	}

	# Prompts user for new username and password.
	name=$(whiptail --inputbox "First, please enter a name for the user account." 10 60 3>&1 1>&2 2>&3 3>&1) || exit 1
	while ! echo "$name" | grep -q "^[a-z_][a-z0-9_-]*$"; do
		name=$(whiptail --nocancel --inputbox "Username not valid. Give a username beginning with a letter, with only lowercase letters, - or _." 10 60 3>&1 1>&2 2>&3 3>&1)
	done
	pass1=$(whiptail --nocancel --passwordbox "Enter a password for that user." 10 60 3>&1 1>&2 2>&3 3>&1)
	pass2=$(whiptail --nocancel --passwordbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
	while ! [ "$pass1" = "$pass2" ]; do
		unset pass2
		pass1=$(whiptail --nocancel --passwordbox "Passwords do not match.\\n\\nEnter password again." 10 60 3>&1 1>&2 2>&3 3>&1)
		pass2=$(whiptail --nocancel --passwordbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
	done
}

##============================================================================
#
usercheck() {
	case $create_account in
		n) return;;
		*);; # Continue
	esac

	! { id -u "$name" >/dev/null 2>&1; } ||
		whiptail --title "WARNING" --yes-button "CONTINUE" \
			--no-button "No wait..." \
			--yesno "The user \`$name\` already exists on this system. DARBS can install for a user already existing, but it will OVERWRITE any conflicting settings/dotfiles on the user account.\\n\\nDARBS will NOT overwrite your user files, documents, videos, etc., so don't worry about that, but only click <CONTINUE> if you don't mind your settings being overwritten.\\n\\nNote also that DARBS will change $name's password to the one you just gave." 14 70
}

##============================================================================
#
preinstallmsg() {
	whiptail --title "Let's get this party started!" --yes-button "Let's go!" \
		--no-button "No, nevermind!" \
		--yesno "The rest of the installation will now be totally automated, so you can sit back and relax.\\n\\nIt will take some time, but when done, you can relax even more with your complete system.\\n\\nNow just press <Let's go!> and the system will begin installation!" 13 60 || {
		clear
		exit 1
	}
}

##============================================================================
#
adduserandpass() {
	case "$(getos)" in
		*Debian*) group="sudo";;
		*Arch*) group="wheel";;
		*) error "Unable to identify flavor of  Linux!\\n OS IDENTIFIED: $(getos)\\n !!! Aborting !!!" ;;
	esac

	# Adds user `$name` with password $pass1.
	whiptail --infobox "Adding user \"$name\"..." 7 50
	useradd -m -g $group -s /bin/zsh "$name" >/dev/null 2>&1 ||
		usermod -a -G $group "$name" && mkdir -p /home/"$name" && chown "$name":${group} /home/"$name"
	export repodir="/home/$name/.local/src"
	mkdir -p "$repodir"
	chown -R "$name":${group} "$(dirname "$repodir")"
	echo "$name:$pass1" | chpasswd
	unset pass1 pass2
}

##============================================================================
#
refreshkeys() {
	case "$(readlink -f /sbin/init)" in
	*systemd*)
		whiptail --infobox "Refreshing Arch Keyring..." 7 40
		pacman --noconfirm -S archlinux-keyring >/dev/null 2>&1
		;;
	*)
		whiptail --infobox "Enabling Arch Repositories for more a more extensive software collection..." 7 40
		pacman --noconfirm --needed -S \
			artix-keyring artix-archlinux-support >/dev/null 2>&1
		grep -q "^\[extra\]" /etc/pacman.conf ||
			echo "[extra]
Include = /etc/pacman.d/mirrorlist-arch" >>/etc/pacman.conf
		pacman -Sy --noconfirm >/dev/null 2>&1
		pacman-key --populate archlinux >/dev/null 2>&1
		;;
	esac
}

##============================================================================
# Add contrib and non-free to the source list
debian_add_contrib_nonfree() {
	if [ -z "$(grep -E "^deb(-src)? .* contrib non-free" /etc/apt/sources.list)" ]; then
		sed -i '/^deb /s/$/ contrib non-free/' /etc/apt/sources.list
		sed -i '/^deb-src /s/$/ contrib non-free/' /etc/apt/sources.list
	fi
}

##============================================================================
#
manualinstall() {
	# Installs $1 manually. Used only for AUR helper here.
	# Should be run after repodir is created and var is set.
	pacman -Qq "$1" && return 0
	whiptail --infobox "Installing \"$1\" manually." 7 50
	sudo -u "$name" mkdir -p "$repodir/$1"
	sudo -u "$name" git -C "$repodir" clone --depth 1 --single-branch \
		--no-tags -q "https://aur.archlinux.org/$1.git" "$repodir/$1" ||
		{
			cd "$repodir/$1" || return 1
			sudo -u "$name" git pull --force origin master
		}
	cd "$repodir/$1" || exit 1
	sudo -u "$name" \
		makepkg --noconfirm -si >/dev/null 2>&1 || return 1
}

##============================================================================
#
maininstall() {
	# Installs all needed programs from main repo.
	whiptail --title "DARBS Installation" --infobox "Installing \`$1\` ($n of $total). $1 $2" 9 70
	installpkg "$1"
}

##============================================================================
#
gitmakeinstall() {
	progname="${1##*/}"
	progname="${progname%.git}"
	dir="$repodir/$progname"
	whiptail --title "DARBS Installation" \
		--infobox "Installing \`$progname\` ($n of $total) via \`git\` and \`make\`. $(basename "$1") $2" 8 70
	sudo -u "$name" git -C "$repodir" clone --depth 1 --single-branch \
		--no-tags -q "$1" "$dir" ||
		{
			cd "$dir" || return 1
			sudo -u "$name" git pull --force origin master
		}
	cd "$dir" || exit 1
	make >/dev/null 2>&1
	make install >/dev/null 2>&1
	cd /tmp || return 1
}

##============================================================================
#
aurinstall() {
	whiptail --title "DARBS Installation" \
		--infobox "Installing \`$1\` ($n of $total) from the AUR. $1 $2" 9 70
	echo "$aurinstalled" | grep -q "^$1$" && return 1
	sudo -u "$name" $aurhelper -S --noconfirm "$1" >/dev/null 2>&1
}

##============================================================================
#
pipinstall() {
	whiptail --title "DARBS Installation" \
		--infobox "Installing the Python package \`$1\` ($n of $total). $1 $2" 9 70
	[ -x "$(command -v "pip")" ] || installpkg python-pip >/dev/null 2>&1
	yes | pip install "$1"
}

##============================================================================
#
installationloop() {
	csv_file=""
	case "$(getos)" in
		*Debian*) csv_file="prog-debian.csv";;
		*Arch*) csv_file="prog-arch.csv";;
		*) error "Unable to identify flavor of  Linux!\\n OS IDENTIFIED: $(getos)\\n !!! Aborting !!!" ;;
	esac

	progsfile="./prog-lists/${csv_file}"
	total=$(wc -l <$progsfile)

	case "$(getos)" in
		*Arch*) aurinstalled=$(pacman -Qqm);;
		*);;
	esac

	while IFS=, read -r tag program comment; do
		n=$((n + 1))
		echo "$comment" | grep -q "^\".*\"$" &&
			comment="$(echo "$comment" | sed -E "s/(^\"|\"$)//g")"
		case "$tag" in
		"A") aurinstall "$program" "$comment" ;;
		"G") gitmakeinstall "$program" "$comment" ;;
		"P") pipinstall "$program" "$comment" ;;
		*) maininstall "$program" "$comment" ;;
		esac
	done <$progsfile
}

##============================================================================
#
putgitrepo() {
	# Downloads a gitrepo $1 and places the files in $2 only overwriting conflicts
	whiptail --infobox "Downloading and installing config files..." 7 60

	[ -z "$3" ] && branch="master" || branch="$repobranch"
	dir=$(mktemp -d)
	[ ! -d "$2" ] && mkdir -p "$2"
	chown "$name":${name} "$dir" "$2"
	sudo -u "$name" git -C "$repodir" clone --depth 1 \
		--single-branch --no-tags -q --recursive -b "$branch" \
		--recurse-submodules "$1" "$dir"
	sudo -u "$name" cp -rfT "$dir" "$2"
}

##============================================================================
#
finalize() {
	whiptail --title "All done!" \
		--msgbox "Congrats! Provided there were no hidden errors, the script completed successfully and all the programs and configuration files should be in place.\\n\\nTo run the new graphical environment, log out and log back in as your new user, then run the command \"startx\" to start the graphical environment (it will start automatically in tty1).\\n\\n.t Luke" 13 80
}

###############################################################################
				 ### SCRIPT ###
###############################################################################

##-----------------------------------------------------------------------------
# Check if user is root on a supported distro. Install whiptail.

[ $(id -u) -ne 0 ] && echo "Please run the script as root... \\n!!! Aborting !!!" && exit 1

case "$(getos)" in
	*Debian*)
		apt update -y > /dev/null 2>&1 ||
			error "Are you sure you're running this as the root user, running Debian have an internet connection?"
		apt install -y libnewt-dev > /dev/null 2>&1 || error "Unable to install \'libnewt-dev\'"
		;;
	*Arch*)
		pacman --noconfirm --needed -Sy libnewt ||
			error "Are you sure you're running this as the root user, running an Arch-based distribution and have an internet connection?"
		;;
	*) error "Unable to identify flavor of  Linux!\\n OS IDENTIFIED: $(getos)\\n !!! Aborting !!!" ;;
esac

##-----------------------------------------------------------------------------
# Welcome user and pick dotfiles.
welcomemsg || error "User exited."

##-----------------------------------------------------------------------------
# Get and verify username and password.
getuserandpass || error "User exited."

##-----------------------------------------------------------------------------
# Give warning if user already exists.
usercheck || error "User exited."

##-----------------------------------------------------------------------------
# Last chance for user to back out before install.
preinstallmsg || error "User exited."

##=============================================================================
### The rest of the script requires no user input.

##-----------------------------------------------------------------------------
# Refresh Arch keyrings.
case "$(getos)" in
	*Debian*)
		apt update -y > /dev/null 2>&1 ||
			error "Error automatically refreshing Debian repository. Consider doing so manually."
		;;
	*Arch*)
		refreshkeys ||
			error "Error automatically refreshing Arch keyring. Consider doing so manually."
		;;
	*) error "Unable to identify flavor of  Linux!\\n OS IDENTIFIED: $(getos)\\n !!! Aborting !!!" ;;
esac

##-----------------------------------------------------------------------------
# Install the required packages
for x in $required_packages; do
	whiptail --title "DARBS Installation" \
		--infobox "Installing \`$x\` which is required to install and configure other programs." 8 70
	installpkg "$x"
done

whiptail --title "DARBS Installation" \
	--infobox "Synchronizing system time to ensure successful and secure installation of software..." 8 70
ntpd -q -g >/dev/null 2>&1

adduserandpass || error "Error adding username and/or password."

[ -f /etc/sudoers.pacnew ] && cp /etc/sudoers.pacnew /etc/sudoers # Just in case

##-----------------------------------------------------------------------------
# Allow user to run sudo without password. Since AUR programs must be installed
# in a fakeroot environment, this is required for all builds with AUR.
trap 'rm -f /etc/sudoers.d/darbs-temp' HUP INT QUIT TERM PWR EXIT
echo "%${group} ALL=(ALL) NOPASSWD: ALL
Defaults:%${group},root runcwd=*" >/etc/sudoers.d/darbs-temp

case "$(getos)" in
	*Debian*) debian_add_contrib_nonfree ;;
	*Arch*)
		# Make pacman colorful, concurrent downloads and Pacman eye-candy.
		grep -q "ILoveCandy" /etc/pacman.conf || sed -i "/#VerbosePkgLists/a ILoveCandy" /etc/pacman.conf
		sed -Ei "s/^#(ParallelDownloads).*/\1 = 5/;/^#Color$/s/#//" /etc/pacman.conf

		# Use all cores for compilation.
		sed -i "s/-j2/-j$(nproc)/;/^#MAKEFLAGS/s/^#//" /etc/makepkg.conf

		manualinstall $aurhelper || error "Failed to install AUR helper."

		# Make sure .*-git AUR packages get updated automatically.
		$aurhelper -Y --save --devel
		;;
	*) ;; # Do nothing
esac

##-----------------------------------------------------------------------------
# The command that does all the installing. Reads the progs.csv file and
# installs each needed program the way required. Be sure to run this only after
# the user has been created and has priviledges to run sudo without a password
# and all build dependencies are installed.
installationloop

##-----------------------------------------------------------------------------
# Install the dotfiles in the user's home directory, but remove .git dir and
# other unnecessary files.
putgitrepo "$dotfilesrepo" "/home/$name/code/dotfiles" "$repobranch"
chown -R "$name":${name} "/home/$name/code/"

oldpath=$(pwd)
cd /home/$name/code/dotfiles/
sudo -u $name ./run
cd ${oldpath}

# Most important command! Get rid of the beep!
rmmod pcspkr
echo "blacklist pcspkr" >/etc/modprobe.d/nobeep.conf

##-----------------------------------------------------------------------------
# Make zsh the default shell for the user.
chsh -s /bin/zsh "$name" >/dev/null 2>&1
sudo -u "$name" mkdir -p "/home/$name/.cache/zsh/"

# Make dash the default #!/bin/sh symlink.
ln -sfT /bin/dash /bin/sh >/dev/null 2>&1

##-----------------------------------------------------------------------------
# All this below to get Brave installed 
whiptail --title "DARBS Installation" --infobox "Installing Brave Browser..." 8 70

case "$(getos)" in
	*Debian*)
		curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
		curl -fsSLo /etc/apt/sources.list.d/brave-browser-release.sources https://brave-browser-apt-release.s3.brave.com/brave-browser.sources

		apt update -y > /dev/null 2>&1
		apt install -y brave-browser > /dev/null 2>&1
		;;
	*Arch*) $aurhelper -S --noconfirm brave-browser ;;
	*) error "Unable to identify flavor of  Linux!\\n OS IDENTIFIED: $(getos)\\n !!! Aborting !!!" ;;
esac

##-----------------------------------------------------------------------------
# Install fonts
whiptail --title "DARBS Installation" --infobox "Downloading fonts..." 8 70

sudo -u "$name" git -C "$repodir" clone --depth 1 --single-branch --no-tags -q "https://github.com/ryanoasis/nerd-fonts.git" "$repodir/nerd-fonts" 

oldpath=$(pwd)
cd "$repodir/nerd-fonts"

for x in $nerd_fonts; do
	whiptail --title "DARBS Installation" \
		--infobox "Installing \'$x Nerd Font\'." 8 70
	sudo -u $name ./install.sh "$x" > /dev/null 2>&1
done

cd "$oldpath"

##-----------------------------------------------------------------------------
# All this below to get ncspot
whiptail --title "DARBS Installation" \
	--infobox "Installing ncspot..." 8 70

case "$(getos)" in
	*Debian*)
		apt install -y flatpak > /dev/null 2>&1
		flatpak install flathub io.github.hrkfdn.ncspot > /dev/null 2>&1
		;;
	*Arch*) $aurhelper -S --noconfirm brave-browser ;;
	*) error "Unable to identify flavor of  Linux!\\n OS IDENTIFIED: $(getos)\\n !!! Aborting !!!" ;;
esac

# Allow ${group} users to sudo with password and allow several system commands
# (like `shutdown` to run without password).
echo "%${group} ALL=(ALL:ALL) ALL" >/etc/sudoers.d/00-darbs-${group}-can-sudo
echo "%${group} ALL=(ALL:ALL) NOPASSWD: /usr/bin/shutdown,/usr/bin/reboot,/usr/bin/systemctl suspend,/usr/bin/wifi-menu,/usr/bin/mount,/usr/bin/umount,/usr/bin/pacman -Syu,/usr/bin/pacman -Syyu,/usr/bin/pacman -Syyu --noconfirm,/usr/bin/loadkeys,/usr/bin/pacman -Syyuw --noconfirm,/usr/bin/pacman -S -y --config /etc/pacman.conf --,/usr/bin/pacman -S -y -u --config /etc/pacman.conf --,/usr/bin/apt update, /usr/bin/apt install, /usr/bin/apt upgrade" >/etc/sudoers.d/01-darbs-cmds-without-password
echo "Defaults editor=/usr/bin/vim" >/etc/sudoers.d/02-darbs-visudo-editor
mkdir -p /etc/sysctl.d
echo "kernel.dmesg_restrict = 0" > /etc/sysctl.d/dmesg.conf

# Cleanup
whiptail --title "DARBS Installation" --infobox "Cleaning up the mess..." 8 70
rm -f /etc/sudoers.d/darbs-temp

case "$(getos)" in
	*Debian*)
		## Enable pipewire
		sudo -u $name systemctl --user enable pipewire /dev/null 2>&1
		sudo -u $namesystemctl --user start pipewire /dev/null 2>&1

		## Remove libnewt
		apt purge -y libnewt-dev > /dev/null 2>&1 || error "Unable to remove \'libnewt-dev\'"
		;;
	*Arch*)
		pacman --noconfirm -Rs libnewt ||
			error "Are you sure you're running this as the root user, running an Arch-based distribution and have an internet connection?"
		;;
	*) error "Unable to identify flavor of  Linux!\\n OS IDENTIFIED: $(getos)\\n !!! Aborting !!!" ;;
esac

# Last message! Install complete!
finalize
